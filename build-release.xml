<?xml version="1.0" encoding="UTF-8"?>
<project name="JFritz-Release" default="scp-update-beta" basedir=".">
	<import file="build-release-pwd.xml" />

	<property name="product" value="JFritz" />
	<property name="version" value="unknown" />

	<!-- release properties -->
	<property name="home" value="ant" />
	<property name="dist" value="${home}/dist" />
	<property name="release" value="${home}/release" />
	<property name="update" value="${home}/update" />
	<property name="lib" value="lib" />
	<property name="docs" value="../Doku" />

	<!-- build properties -->
	<property name="build" value="${home}/build" />
	<property name="build.classes" value="${build}/classes" />
	<property name="build.jars" value="${build}/jars" />
	<property name="build.resources" value="${build}/resources" />

	<!-- mac spezifisch -->

	<!-- include all jars in lib to classpath -->
	<path id="build.classpath">
		<fileset dir="${lib}">
			<include name="**/*.jar" />
		</fileset>
	</path>

	<path id="helper.classpath">
		<pathelement location="${build.classes}" />
	</path>

	<path id="test.classpath">
		<path refid="build.classpath" />
		<pathelement location="${build.classes}" />
		<pathelement location="${build.unittests}" />
		<fileset dir="${build.jars}">
			<include name="*.jar" />
		</fileset>
	</path>

	<target name="prepare-docs">
		<ant antfile="build.xml" dir="." target="clean" />
		<ant antfile="build.xml" dir="." target="build" />
		<taskdef name="GetJFritzVersion" classname="de.moonflower.jfritz.ant.GetJFritzVersion" classpathref="helper.classpath" />
		<GetJFritzVersion/>
		<echo message="${app.name} - ${version} compiled!" />
	</target>

	<target name="release-linux" depends="prepare-docs">
		<ant antfile="build.xml" dir="." target="build" />
		<delete dir="${release}/linux" />
		<mkdir dir="${release}" />
		<mkdir dir="${release}/linux" />
		<mkdir dir="${release}/linux/jfritz-${version}" />

		<!-- copy new jfritz-files to linux directory -->
		<copy todir="${release}/linux/jfritz-${version}">
			<fileset dir="${dist}">
			</fileset>
		</copy>

		<tar tarfile="${release}/linux/jfritz-${version}.tar" basedir="${release}/linux" />
		<gzip src="${release}/linux/jfritz-${version}.tar" destfile="${release}/linux/jfritz-${version}.tar.gz" />
		<delete dir="${release}/linux/jfritz-${version}" />
		<delete file="${release}/linux/jfritz-${version}.tar" />
	</target>

	<target name="release-mac-package" depends="prepare-docs">
	    <property name="jar"      location="${dist}/${product}.jar"/>
	    <property name="bundle"   location="${release}/Mac/${product}.app"/>
		<property name="contents" location="${bundle}/Contents"/>
		<property name="resources" location="${contents}/Resources"/>
	    <property name="macos"    location="${contents}/MacOS"/>
		<property name="java"      location="${resources}/Java"/>

		<mkdir dir="${release}/mac"/>
        <mkdir dir="${macos}"/>
        <mkdir dir="${java}"/>
        <copy todir="${macos}" file="../Release-templates/mac-new/JavaApplicationStub"/>
        <copy todir="${contents}" file="../Release-templates/mac-new/Info.plist">
            <filterset>
                <filter token="PRODUCT" value="${product}"/>
            </filterset>
        </copy>
        <echo file="${contents}/PkgInfo" append="false" message="APPL????"/>
        <copy todir="${resources}" file="../Release-templates/mac-new/${product}.icns"/>
        <copy todir="${java}" file="${jar}"/>
        <chmod file="${stub}" perm="755"/>
	</target>

	<!-- TODO: Ãœberarbeiten auf den MAC-Installer von 0.6.1 -->
	<target name="release-mac" depends="prepare-docs">
		<ant antfile="build.xml" dir="." target="build" />
		<delete dir="${release}/mac" />
		<mkdir dir="${release}" />
		<mkdir dir="${release}/mac" />
		<mkdir dir="${release}/mac/tmp" />

		<!-- copy mac-files to release directory -->
		<copy todir="${release}/mac/tmp">
			<fileset dir="../Release/MAC">
			</fileset>
		</copy>

		<!-- modify mac-files -->
		<move file="${release}/mac/tmp/__MACOSX/jfritz-VERSION" tofile="${release}/mac/tmp/__MACOSX/jfritz-${version}" />
		<move file="${release}/mac/tmp/jfritz-VERSION" tofile="${release}/mac/tmp/jfritz-${version}" />

		<!-- copy new jfritz-files to mac directory -->
		<copy file="${dist}/JFritz-Handbuch.pdf" todir="${release}/mac/tmp/jfritz-${version}" />
		<copy todir="${release}/mac/tmp/jfritz-${version}/JFritz.app/Contents/Resources/Java">
			<fileset dir="${dist}">
			</fileset>
		</copy>
		<delete file="${release}/mac/tmp/jfritz-${version}/JFritz.app/Contents/Resources/Java/JFritz-Handbuch.pdf" />
		<delete file="${release}/mac/tmp/jfritz-${version}/JFritz.app/Contents/Resources/Java/jacob.dll" />
		<delete file="${release}/mac/tmp/jfritz-${version}/JFritz.app/Contents/Resources/Java/lib/jacob.jar" />
		<delete dir="${release}/mac/tmp/jfritz-${version}/JFritz.app/Contents/Resources/Java/lib/windows" />
		<delete dir="${release}/mac/tmp/jfritz-${version}/JFritz.app/Contents/Resources/Java/lib/sunos" />
		<delete dir="${release}/mac/tmp/jfritz-${version}/JFritz.app/Contents/Resources/Java/lib/linux" />

		<!-- zip mac directorys and delete temporary files -->
		<zip destfile="${release}/mac/jfritz-${version}-MAC.zip" basedir="${release}/mac/tmp" />
		<delete dir="${release}/mac/tmp" />

	</target>

	<target name="release-win" depends="prepare-docs">
		<ant antfile="build.xml" dir="." target="build" />

		<delete dir="${release}/win" />
		<mkdir dir="${release}" />
		<mkdir dir="${release}/win" />
		<mkdir dir="${release}/win/tmp" />

		<!-- copy win-files to release directory -->
		<copy todir="${release}/win/tmp">
			<fileset dir="../../Release/WIN">
			</fileset>
		</copy>

		<!-- clear copied directories -->
		<delete dir="${release}/win/tmp/binaries" />
		<delete dir="${release}/win/tmp/Output" />

		<!-- copy new jfritz-files to win directory -->
		<copy todir="${release}/win/tmp/binaries" overwrite="yes">
			<fileset dir="${dist}">
			</fileset>
		</copy>

		<!-- actualize version of setup file -->
		<taskdef name="UpdateSetupConfig" classname="de.moonflower.jfritz.ant.UpdateSetupConfig" classpathref="helper.classpath" />
		<UpdateSetupConfig file="${release}/win/tmp/jfritz-version.txt" appName="${product}" appType="Setup" appVersion="${version}" />

		<!-- generate setup-file -->
		<exec executable="C:\Program Files\Inno Setup 5\ISCC.exe">
			<arg value="${release}/win/tmp/jfritz.iss" />
		</exec>

		<!-- zip setup-file and delete temporary files-->
		<zip destfile="${release}/win/jfritz-${version}-Win.zip" basedir="${release}/win/tmp/Output" />
		<zip destfile="${release}/win/JFritz-${version}.zip" basedir="${release}/win/tmp/binaries" />
		<delete dir="${release}/win/tmp" />
	</target>

	<target name="prepare-updatefiles" depends="prepare-docs" description="Prepares files for creating update file">
		<ant antfile="build.xml" dir="." target="build" />
		<copy todir="${build.resources}/lang/lang">
			<fileset dir="${dist}/lang" />
		</copy>
		<copy todir="${build.resources}/lib/lib">
			<fileset dir="${dist}/lib" />
		</copy>
		<copy todir="${build.resources}/number/number">
			<fileset dir="${dist}/number" />
		</copy>
		<copy todir="${build.resources}/pictures/pictures">
			<fileset dir="${dist}/pictures">
				<include name="**/NoPic.jpg" />
			</fileset>
		</copy>
		<copy todir="${build.resources}/styles/styles">
			<fileset dir="${dist}/styles">
				<include name="**/*.html" />
			</fileset>
		</copy>

		<copy todir="${build.resources}">
			<fileset dir=".">
				<include name="splash.png" />
				<include name="status.png" />
				<include name="MSVCR71.dll" />
			</fileset>
		</copy>

		<zip zipfile="${build.resources}/lang.zip" basedir="${build.resources}/lang" />
		<zip zipfile="${build.resources}/lib.zip" basedir="${build.resources}/lib" />
		<zip zipfile="${build.resources}/number.zip" basedir="${build.resources}/number" />
		<zip zipfile="${build.resources}/pictures.zip" basedir="${build.resources}/pictures" />
		<zip zipfile="${build.resources}/styles.zip" basedir="${build.resources}/styles" />
		<delete dir="${build.resources}/lang" />
		<delete dir="${build.resources}/lib" />
		<delete dir="${build.resources}/number" />
		<delete dir="${build.resources}/pictures" />
		<delete dir="${build.resources}/styles" />

		<copy todir="${build.jars}">
			<fileset dir="${build}">
				<include name="**/*.jar" />
			</fileset>
		</copy>

	</target>

	<target name="create-updatefiles" depends="prepare-updatefiles" description="Creates files for auto update">
		<mkdir dir="${update}" />
		<taskdef name="createUpdateFile" classname="de.moonflower.jfritz.ant.CreateUpdateFile" classpathref="test.classpath" />
		<createUpdateFile toDir="${update}" version="${version}">
			<addDirectory directory="${build.resources}" />
			<addDirectory directory="${build.jars}" />
		</createUpdateFile>

		<mkdir dir="${update}/${version}" />
		<copy todir="${update}/${version}" >
			<fileset dir="${build.jars}">
				<include name="**/*.jar" />
			</fileset>
			<fileset dir="${build.resources}" />
		</copy>
		<delete dir="${build.jars}" />
		<delete dir="${build.resources}" />
	</target>

	<target name="scp-beta" depends="release-linux, release-win" description="Copy all files to beta directory">
		<scp file="${release}/win/JFritz-${version}-Win.zip" port="${port2}" trust="yes" todir="${user2}@${server2}:./" verbose="yes" password="${password2}"/>
		<scp file="${release}/win/JFritz-${version}.zip" port="${port2}" trust="yes" todir="${user2}@${server2}:./" verbose="yes" password="${password2}"/>
		<scp file="${dist}/Changelog.txt" port="${port2}" trust="yes" todir="${user2}@${server2}:./" verbose="yes" password="${password2}"/>
		<sshexec command="./release.sh" username="${user2}" host="${server2}" port="${port2}" trust="yes" password="${password2}" />
	</target>

	<target name="scp-update-beta" depends="create-updatefiles" description="Uploads update files per scp to jfritz.robotniko.de">
		<zip destfile="${update}/jfritz-${version}-update.zip" basedir="${update}/${version}" />
		<scp file="${update}/jfritz-${version}-update.zip" port="${port1}" trust="yes" todir="${user1}@${server1}:./public/update/" verbose="yes" password="${password1}" />
		<sshexec command="unzip ./public/update/jfritz-${version}-update.zip -d ./public/update/${version}" username="${user1}" host="${server1}" port="${port1}" trust="yes" password="${password1}" />
		<sshexec command="rm ./public/update/jfritz-${version}-update.zip"  username="${user1}" host="${server1}" port="${port1}" trust="yes" password="${password1}" />
		<scp file="${update}/update.txt" port="${port1}" trust="yes" todir="${user1}@${server1}:./public/update/" verbose="yes" password="${password1}" />
		<scp file="${update}/current.txt" port="${port1}" trust="yes" todir="${user1}@${server1}:./public/update/" verbose="yes" password="${password1}" />
	</target>

	<target name="scp-update" depends="create-updatefiles" description="Uploads files per scp to jfritz-webspace">
		<scp file="${update}/update.txt" port="${port3}" trust="yes" todir="${user3}@${server3}:./" password="${password3}" />
	</target>

	<target name="ftp-beta" depends="release-linux, release-win" description="Copy all files to beta directory at Rainer's FTP-Server">
		  <ftp server="${server4}"
		       userid="${user4}"
		       password="${password4}">
		    <fileset dir="${release}/win/">
			      <include name="JFritz-${version}-Win.zip"/>
			      <include name="JFritz-${version}.zip"/>
		    </fileset>
		    <fileset dir="${dist}/">
			      <include name="Changelog.txt"/>
		    </fileset>
		  </ftp>
	</target>

	<target name="release-all" depends="prepare-docs, release-linux, release-win, create-updatefiles">
	</target>

</project>