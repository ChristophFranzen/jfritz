<?xml version="1.0" encoding="UTF-8"?>
<project name="JFritz-Release" default="scp-update-beta" basedir=".">
	<import file="build-release-pwd.xml" />
	<import file="build.xml" />

	<property name="product" value="JFritz" />
	<property name="version" value="unknown" />

	<!-- release properties -->
	<property name="home" value="ant" />
	<property name="dist" value="${home}/dist" />
	<property name="release" value="${home}/release" />
	<property name="update" value="${home}/update" />
	<property name="lib" value="lib" />
	<property name="lib-dev" value="lib-dev" />
	<property name="docs" value="../Doku" />
	<property name="scp-beta-path" value="./public/beta" />

	<!-- build properties -->
	<property name="build" value="${home}/build" />
	<property name="build.classes" value="${build}/classes" />
	<property name="build.jars" value="${build}/jars" />
	<property name="build.resources" value="${build}/resources" />

	<!-- include all jars in lib to classpath -->
	<path id="build.classpath">
		<fileset dir="${lib}">
			<include name="**/*.jar" />
		</fileset>
	</path>

	<path id="helper.classpath">
		<pathelement location="${build.classes}" />
	</path>

	<path id="test.classpath">
		<path refid="build.classpath" />
		<pathelement location="${build.classes}" />
		<pathelement location="${build.unittests}" />
		<fileset dir="${build}">
			<include name="*.jar" />
		</fileset>
	</path>

	<path id="ant-deb.classpath">
		<fileset dir="${lib-dev}">
			<include name="**/*.jar" />
		</fileset>
	</path>

	<taskdef resource="ant_deb_task.properties" classpathref="ant-deb.classpath"/>
	<taskdef resource="proguard/ant/task.properties" classpathref="ant-deb.classpath" />

	<target name="prepare" depends="clean, build, getVersion" description="Runs getVersion, clean and build of JFritz!">
	</target>


	<!--
		#############################################################################################
		# Main Targets
		#############################################################################################
	-->
	<target name="release-beta-files" depends="prepare">
		<!-- obfuscate the data -->
		<!-- <antcall target="obfuscate" /> -->

		<!-- prepare all debug-files -->
		<antcall target="prepare-beta-files" />

		<!-- scp beta files to jfritz.robotniko.de -->
		<antcall target="scp-beta" />
	</target>

	<target name="jabber-msg" depends="getVersion">
		  <taskdef name="jabber" classname="com.tfftech.ant.taskdefs.im.jabber.JabberTask" />
		  <jabber host="robotniko.de" port="25222" from="${jabber-user}" password="${jabber-pwd}"
		  	tolist="${jabber-rcp1},${jabber-rcp2}">
		  	<message>Neue Version ${version} ist online: http://jfritz.robotniko.de/beta/</message>
		  </jabber>
	</target>

	<target name="email-msg" depends="getVersion">
		<mail
			mailhost="${mailhost}"
			mailport="${mailport}"
			ssl="yes"
			user="${mailuser}"
			password="${mailpwd}"
			charset="utf-8"
			from="${mailuser}"
			replyto="${mailuser}"
			messagefile="NewVersionMail.txt"
			subject="JFritz: Neue Version ${version} verf체gbar!"
			bcclist="${mail-rcp_skyteddy}, ${mail-rcp_mr_command}, ${mail-rcp_BurningCrash},
					 ${mail-rcp_Kolass}, ${mail-rcp_laubenpieper},
					 ${mail-rcp_Jonnyswiss}, ${mail-rcp_DrVerdi}, ${mail-rcp_Muenchner},
			         ${mail-rcp_Fred}, ${mail-rcp_ernest015}, ${mail-rcp_Hermann},
					 ${mail-rcp_doc456}, ${mail-rcp_Deudekom}, ${mail-rcp_W채ldler}">
			<to address="${mail-rcp1}" />
		</mail>
		<mail
			mailhost="${mailhost}"
			mailport="${mailport}"
			ssl="yes"
			user="${mailuser}"
			password="${mailpwd}"
			charset="utf-8"
			from="${mailuser}"
			replyto="${mailuser}"
			messagefile="NewVersionMail.txt"
			subject="JFritz: Neue Version ${version} verf체gbar!"
			bcclist="${mail-rcp_magiclb}, ${mail-rcp_DocAdams}, ${mail-rcp_Droemel},
				 ${mail-rcp_Feuer_Fritz}, ${mail-rcp_musenbaron}, ${mail-rcp_Stefan},
				 ${mail-rcp_mega}, ${mail-rcp_Freenetler}, ${mail-rcp_Weigandt},
				 ${mail-rcp_weadolf}, ${mail-rcp_Wolfgang},
				 ${mail-rcp_Mac_}, ${mail-rcp_Schlumpfine}, ${mail-rcp_Junge}">
			<to address="${mail-rcp1}" />
		</mail>
		<mail
			mailhost="${mailhost}"
			mailport="${mailport}"
			ssl="yes"
			user="${mailuser}"
			password="${mailpwd}"
			charset="utf-8"
			from="${mailuser}"
			replyto="${mailuser}"
			messagefile="NewVersionMail.txt"
			subject="JFritz: Neue Version ${version} verf체gbar!"
			bcclist="${mail-rcp_Hasa}, ${mail-rcp_Stephan}, ${mail-rcp_roman200},
				 ${mail-rcp_digi1}, ${mail-rcp_yelsip}, ${mail-rcp_ekrieger},
				 ${mail-rcp_franco}, ${mail-rcp_richard}, ${mail-rcp_valery}">
			<to address="${mail-rcp1}" />
		</mail>
	</target>

	<target name="scp-update-beta" depends="create-updatefiles" description="Uploads update files to jfritz.robotniko.de/update">
		<zip destfile="${update}/jfritz-${version}-update.zip" basedir="${update}/${version}" />
		<scp file="${update}/jfritz-${version}-update.zip" port="${port1}" trust="yes" todir="${user1}@${server1}:./public/update/" verbose="yes" password="${password1}" />
		<sshexec command="unzip ./public/update/jfritz-${version}-update.zip -d ./public/update/${version}" username="${user1}" host="${server1}" port="${port1}" trust="yes" password="${password1}" />
		<sshexec command="rm ./public/update/jfritz-${version}-update.zip"  username="${user1}" host="${server1}" port="${port1}" trust="yes" password="${password1}" />
		<scp file="${update}/update.txt" port="${port1}" trust="yes" todir="${user1}@${server1}:./public/update/" verbose="yes" password="${password1}" />
		<scp file="${update}/current.txt" port="${port1}" trust="yes" todir="${user1}@${server1}:./public/update/" verbose="yes" password="${password1}" />
	</target>

	<target name="scp-update" depends="create-updatefiles" description="Uploads files per scp to update.jfritz.org">
		<zip destfile="${update}/jfritz-${version}-update.zip" basedir="${update}/${version}" />
		<scp file="${update}/jfritz-${version}-update.zip" port="${port3}" trust="yes" todir="${user3}@${server3}:./public/update/" verbose="yes" password="${password3}" />
		<sshexec command="unzip ./public/update/jfritz-${version}-update.zip -d ./public/update/${version}" username="${user3}" host="${server3}" port="${port3}" trust="yes" password="${password3}" />
		<sshexec command="rm ./public/update/jfritz-${version}-update.zip"  username="${user3}" host="${server3}" port="${port3}" trust="yes" password="${password3}" />
		<scp file="${update}/update.txt" port="${port3}" trust="yes" todir="${user3}@${server3}:./public/update/" verbose="yes" password="${password3}" />
		<scp file="${update}/current.txt" port="${port3}" trust="yes" todir="${user3}@${server3}:./public/update/" verbose="yes" password="${password3}" />
	</target>

	<target name="create-updatefiles" depends="prepare-updatefiles" description="Creates files for auto update">
		<mkdir dir="${update}" />
		<taskdef name="createUpdateFile" classname="de.moonflower.jfritz.ant.CreateUpdateFile" classpathref="test.classpath" />
		<createUpdateFile toDir="${update}" version="${version}">
			<addDirectory directory="${build.resources}" />
			<addDirectory directory="${build.jars}" />
		</createUpdateFile>

		<mkdir dir="${update}/${version}" />
		<copy todir="${update}/${version}" >
			<fileset dir="${build.jars}">
				<include name="**/*.jar" />
			</fileset>
			<fileset dir="${build.resources}" />
		</copy>
		<delete dir="${build.jars}" />
		<delete dir="${build.resources}" />
	</target>

	<!--
		#############################################################################################
		# Sub Targets, do not execute them! Only call in "Main Targets"
		#############################################################################################
	-->
	<target name="obfuscate" description="Obfuscates, shrinks and optimizes source code!">
		<mkdir dir="${dist}/obfuscated"/>
		<mkdir dir="${dist}/origJARs"/>

		<copy todir="${dist}/origJARs">
			<fileset dir="${dist}">
				<include name="*.jar"/>
			</fileset>
		</copy>

		<!-- adapt mapping filepath in jfritz-template.pro" -->
		<copy file="../../Release/ProGuard/jfritz-template.pro"
		             tofile="${dist}/obfuscated/jfritz-${version}.pro"
					 preservelastmodified="yes"
					 overwrite="yes">
	        <filterchain>
	           <replacetokens>
					<token key="MAPPING_FILE" value="../../../../../Release/ProGuard/jfritz-${version}.mapping"/>
	            </replacetokens>
	        </filterchain>
	    </copy>

		<proguard configuration="${dist}/obfuscated/jfritz-${version}.pro" />

		<copy overwrite="yes" todir="${dist}">
			<fileset dir="${dist}/obfuscated/">
				<include name="*.jar"/>
			</fileset>
		</copy>

		<delete dir="${dist}/obfuscated/" />
	</target>

	<target name="create-windows">
		<antcall target="prepare-windows" />
		<antcall target="create-windows-zip" />
		<antcall target="create-windows-setup" />

		<!-- zip setup-file -->
		<zip destfile="${release}/win/JFritz-${version}-Win.zip"
		       basedir="${release}/win/"
		       includes="JFritz-${version}-Setup.exe" />
		<antcall target="finish-windows" />
	</target>

	<target name="create-linux">
		<antcall target="prepare-linux" />
		<antcall target="create-linux-deb" />
		<antcall target="create-linux-targz" />
		<antcall target="finish-linux" />
		<!-- create linux files -->
		<move file="${release}/linux/jfritz_${version}-1_all.deb"
			  tofile="${release}/linux/JFritz-${version}.deb" />
	</target>

	<target name="create-mac">
		<!-- create mac files -->
		<antcall target="prepare-mac" />
		<antcall target="create-mac-zip" />
		<!-- <antcall target="create-mac-dmg" /> -->
		<antcall target="finish-mac" />
		<antcall target="mac-set-execution-bit" />
	</target>

	<target name="prepare-beta-files" depends="prepare">
		<antcall target="create-windows" />
		<!-- rename zip and setup to beta -->
		<move file="${release}/win/JFritz-${version}-Win.zip"
			  tofile="${release}/win/JFritz-${version}-Beta.zip" />
		<move file="${release}/win/JFritz-${version}-Setup.exe"
			  tofile="${release}/win/JFritz-${version}-Beta-Setup.exe" />
		<!-- zip setup-file -->
		<zip destfile="${release}/win/JFritz-${version}-Beta-Win.zip"
		       basedir="${release}/win/"
		       includes="JFritz-${version}-Beta-Setup.exe" />

		<!-- create linux files -->
		<antcall target="create-linux" />
		<move file="${release}/linux/JFritz-${version}.tar.gz"
			  tofile="${release}/linux/JFritz-${version}-Beta.tar.gz" />
		<move file="${release}/linux/JFritz-${version}.deb"
			  tofile="${release}/linux/JFritz-${version}-Beta.deb" />

		<!-- create mac files -->
		<antcall target="create-mac" />
		<move file="${release}/mac/JFritz-${version}-Mac.zip"
			  tofile="${release}/mac/JFritz-${version}-Beta-Mac.zip" />
	</target>

	<target name="prepare-release-files" depends="prepare">
		<antcall target="create-windows" />
		<antcall target="create-linux" />
		<antcall target="create-mac" />
	</target>

	<target name="prepare-linux" description="Prepares directories for linux release!">
		<delete dir="${release}/linux" />
		<mkdir dir="${release}" />
		<mkdir dir="${release}/linux" />
		<mkdir dir="${release}/linux/jfritz-${version}" />

		<!-- copy new jfritz-files to linux directory -->
		<copy todir="${release}/linux/jfritz-${version}">
			<fileset dir="${dist}">
			</fileset>
		</copy>
		<!-- copy logo to linux directory -->
		<copy todir="${release}/linux/jfritz-${version}">
			<fileset dir="../../Release/Linux/">
				<include name="jfritz.png" />
			</fileset>
		</copy>
	</target>

	<target name="finish-linux" description="Deletes temporary linux release files!">
		<delete dir="${release}/linux/jfritz-${version}" />
	</target>

	<target name="create-linux-deb" description="Creates a deb-Package for Linux (Debian)">
		<!-- do deb-packaging here -->
        <desktopentry
            toFile="${release}/linux/JFritz.desktop"
            name="JFritz"
            comment="An application to communicate with your FRITZ!Box"
            exec="/usr/bin/jfritz"
            icon="/opt/JFritz/jfritz.png"
            categories="Utility;TelephonyTools;Java"
        />

        <deb
            todir="${release}/linux"
            package="jfritz"
            section="utils"
            depends="sun-java5-jre | sun-java6-jre"
        	preinst="../../Release/Linux/preinst"
        >
            <version upstream="${version}"/>
            <maintainer email="Robert Palmer" name="jfritz@robotniko.de"/>
            <description synopsis="An application to communicate with your FRITZ!Box.">
It is possible to get the caller list, manage phonebook contacts, do reverse lookup for unknown phone numbers,
show incoming and outgoing calls in real time and to initiate new calls from the computer.

http://www.jfritz.org/
            </description>
            <tarfileset dir="${release}/linux/jfritz-${version}" prefix="/opt/JFritz">
                <include name="**/**"/>
            	<exclude name="lib/windows/**"/>
            	<exclude name="lib/mac/**"/>
	        	<exclude name="lib/sunos/**"/>
            </tarfileset>

            <tarfileset file="../../Release/Linux/jfritz" prefix="/usr/bin" filemode="755"/>
            <tarfileset dir="../../Release/Linux/" prefix="/usr/share/doc/jfritz">
                <include name="COPYING"/>
                <include name="README-de"/>
                <include name="README-en"/>
            </tarfileset>
            <tarfileset file="${release}/linux/JFritz.desktop" prefix="usr/share/applications"/>
        </deb>

		<delete>
			<fileset dir="${release}/linux/">
	    		<include name="JFritz.desktop"/>
			</fileset>
		</delete>
	</target>

	<target name="create-linux-targz" description="Creates a tar.gz-Release for Linux!">
		<tar tarfile="${release}/linux/jfritz-${version}.tar">
			<tarfileset dir="${release}/linux">
				<exclude name="*.deb"/>
			</tarfileset>
		</tar>
		<gzip src="${release}/linux/jfritz-${version}.tar" destfile="${release}/linux/JFritz-${version}.tar.gz" />
		<delete file="${release}/linux/jfritz-${version}.tar" />
	</target>


	<target name="prepare-mac" description="Prepares directories for mac release!">
		<delete dir="${release}/mac" />
		<mkdir dir="${release}" />
		<mkdir dir="${release}/mac" />
		<mkdir dir="${release}/mac/tmp" />

		<!-- copy mac-template to release directory -->
		<copy todir="${release}/mac/tmp">
			<fileset dir="../../Release/MAC/Vorlage">
			</fileset>
		</copy>

		<copy file="../../Release/MAC/Vorlage/__MACOSX/JFritz.app/Contents/._Info.plist"
		             tofile="${release}/mac/tmp/__MACOSX/JFritz.app/Contents/._Info.plist" />

		<!-- adapt version string in Info.plist -->
		<copy file="../../Release/MAC/Vorlage/JFritz.app/Contents/Info.plist"
		             tofile="${release}/mac/tmp/JFritz.app/Contents/Info.plist"
					 overwrite="yes">
	        <filterchain>
	           <replacetokens>
					<token key="version" value="${version}"/>
	            </replacetokens>
	        </filterchain>
	    </copy>

		<!-- copy actual changelog -->
		<copy todir="${release}/mac/tmp">
			<fileset dir="${dist}">
				<include name="**/Changelog.txt" />
			</fileset>
		</copy>

		<!-- copy application files -->
		<copy todir="${release}/mac/tmp/JFritz.app/Contents/Resources/Java">
			<fileset dir="${dist}">
			</fileset>
		</copy>

	</target>

	<target name="finish-mac" description="Deletes temporary mac release files!">
		<delete dir="${release}/mac/tmp" />
	</target>

	<target name="mac-set-execution-bit">
		<scp file="${release}/mac/JFritz-${version}-Mac.zip" port="${port2}" trust="yes" todir="${user2}@${server2}:./public/" verbose="yes" password="${password2}"/>
		<sshexec command="mkdir ./public/mac"  username="${user2}" host="${server2}" port="${port2}" trust="yes" password="${password2}" />
		<sshexec command="cd ./public/mac; unzip ../JFritz-${version}-Mac.zip" username="${user2}" host="${server2}" port="${port2}" trust="yes" password="${password2}" />
		<sshexec command="chmod 555 ./public/mac/JFritz.app/Contents/MacOS/JavaApplicationStub" username="${user2}" host="${server2}" port="${port2}" trust="yes" password="${password2}" />
		<sshexec command="rm ./public/JFritz-${version}-Mac.zip" username="${user2}" host="${server2}" port="${port2}" trust="yes" password="${password2}" />
		<sshexec command="cd ./public/mac; zip -r ../JFritz-${version}-Mac.zip *" username="${user2}" host="${server2}" port="${port2}" trust="yes" password="${password2}" />
		<sshexec command="cd ./public/mac; rm * -rf" username="${user2}" host="${server2}" port="${port2}" trust="yes" password="${password2}" />
		<sshexec command="rmdir ./public/mac" username="${user2}" host="${server2}" port="${port2}" trust="yes" password="${password2}" />
		<scp file="${user2}@${server2}:./public/JFritz-${version}-Mac.zip" port="${port2}" trust="yes" todir="${release}/mac/" verbose="yes" password="${password2}"/>
	</target>

	<target name="create-mac-zip" description="Creates a ZIP-File for MacOS!">
		<zip destfile="${release}/mac/JFritz-${version}-Mac.zip" basedir="${release}/mac/tmp" />
	</target>

	<target name="create-mac-dmg" description="Creates a DMG-File for MacOS!">
		<waitfor maxwait="15" maxwaitunit="minute" checkevery="10000">
			<available file="${release}/mac/JFritz-${version}.dmg"/>
		</waitfor>

		<mkdir dir="${release}/mac/JFritz-${version}" />
		<!-- copy new package to mac directory -->
		<copy todir="${release}/mac/JFritz-${version}">
			<fileset dir="${release}/mac/">
				<include name="**/JFritz-${version}.dmg" />
			</fileset>
		</copy>
		<delete file="${release}/mac/JFritz-${version}.dmg" />
	</target>

	<target name="prepare-windows" description="Prepares directories for windows release!">
		<delete dir="${release}/win" />
		<mkdir dir="${release}" />
		<mkdir dir="${release}/win" />
		<mkdir dir="${release}/win/tmp" />

		<!-- copy win template to release directory -->
		<copy todir="${release}/win/tmp">
			<fileset dir="../../Release/WIN">
			</fileset>
		</copy>

		<!-- clear copied directories -->
		<delete dir="${release}/win/tmp/binaries" />
		<delete dir="${release}/win/tmp/Output" />

		<!-- copy new jfritz-files to win directory -->
		<copy todir="${release}/win/tmp/binaries" overwrite="yes">
			<fileset dir="${dist}">
			</fileset>
		</copy>

	</target>

	<target name="create-windows-zip" description="Creates a Windows ZIP-File!">
		<zip destfile="${release}/win/JFritz-${version}.zip" basedir="${release}/win/tmp/binaries" />
	</target>

	<target name="create-windows-setup" description="Create a Windows Setup-File!">
		<delete dir="${release}/win/tmp/Output" />
		<!-- creating beta version -->
		<!-- actualize version of setup file -->
		<taskdef name="UpdateSetupConfig" classname="de.moonflower.jfritz.ant.UpdateSetupConfig" classpathref="helper.classpath" />
		<UpdateSetupConfig file="${release}/win/tmp/jfritz-version.txt" appName="${product}" appType="Setup" appVersion="${version}" />

		<!-- generate setup-file -->
		<exec executable="C:\Program Files (x86)\Inno Setup 5\ISCC.exe">
			<arg value="${release}/win/tmp/jfritz.iss" />
		</exec>

		<move file="${release}/win/tmp/Output/JFritz-${version}-Setup.exe"
			  tofile="${release}/win/JFritz-${version}-Setup.exe" />

	</target>

	<target name="finish-windows" description="Deletes temporary windows release files!">
		<delete dir="${release}/win/tmp" />
	</target>

	<target name="scp-beta" description="Copy windows-, linux and mac release files to jfritz.robotniko.de/beta">
		<scp file="${dist}/Changelog.txt" port="${port2}" trust="yes" todir="${user2}@${server2}:${scp-beta-path}" verbose="yes" password="${password2}"/>
		<scp file="${release}/win/JFritz-${version}-Beta-Win.zip" port="${port2}" trust="yes" todir="${user2}@${server2}:./public/" verbose="yes" password="${password2}"/>
		<scp file="${release}/win/JFritz-${version}-Beta.zip" port="${port2}" trust="yes" todir="${user2}@${server2}:./public/" verbose="yes" password="${password2}"/>
		<scp file="${release}/linux/JFritz-${version}-Beta.tar.gz" port="${port2}" trust="yes" todir="${user2}@${server2}:./public/" verbose="yes" password="${password2}"/>
		<scp file="${release}/linux/JFritz-${version}-Beta.deb" port="${port2}" trust="yes" todir="${user2}@${server2}:./public/" verbose="yes" password="${password2}"/>
		<scp file="${release}/mac/JFritz-${version}-Beta-Mac.zip" port="${port2}" trust="yes" todir="${user2}@${server2}:./public/" verbose="yes" password="${password2}"/>

		<!-- mac deflate and set execute bit -->
		<sshexec command="mkdir ./public/mac"  username="${user2}" host="${server2}" port="${port2}" trust="yes" password="${password2}" />
		<sshexec command="cd ./public/mac; unzip ../JFritz-${version}-Beta-Mac.zip" username="${user2}" host="${server2}" port="${port2}" trust="yes" password="${password2}" />
		<sshexec command="chmod 555 ./public/mac/JFritz.app/Contents/MacOS/JavaApplicationStub" username="${user2}" host="${server2}" port="${port2}" trust="yes" password="${password2}" />
		<sshexec command="rm ./public/JFritz-${version}-Beta-Mac.zip" username="${user2}" host="${server2}" port="${port2}" trust="yes" password="${password2}" />
		<sshexec command="cd ./public/mac; zip -r ../JFritz-${version}-Beta-Mac.zip *" username="${user2}" host="${server2}" port="${port2}" trust="yes" password="${password2}" />
		<sshexec command="cd ./public/mac; rm * -rf" username="${user2}" host="${server2}" port="${port2}" trust="yes" password="${password2}" />
		<sshexec command="rmdir ./public/mac" username="${user2}" host="${server2}" port="${port2}" trust="yes" password="${password2}" />

		<sshexec command="mv -f ${scp-beta-path}/JFritz* ${scp-beta-path}/old"  username="${user2}" host="${server2}" port="${port2}" trust="yes" password="${password2}" />
		<sshexec command="mv -f ./public/JFritz-${version}-Beta-Mac.zip ${scp-beta-path}" username="${user2}" host="${server2}" port="${port2}" trust="yes" password="${password2}" />
		<sshexec command="mv -f ./public/JFritz-${version}-Beta-Win.zip ${scp-beta-path}" username="${user2}" host="${server2}" port="${port2}" trust="yes" password="${password2}" />
		<sshexec command="mv -f ./public/JFritz-${version}-Beta.zip ${scp-beta-path}" username="${user2}" host="${server2}" port="${port2}" trust="yes" password="${password2}" />
		<sshexec command="mv -f ./public/JFritz-${version}-Beta.tar.gz ${scp-beta-path}" username="${user2}" host="${server2}" port="${port2}" trust="yes" password="${password2}" />
		<sshexec command="mv -f ./public/JFritz-${version}-Beta.deb ${scp-beta-path}" username="${user2}" host="${server2}" port="${port2}" trust="yes" password="${password2}" />
	</target>

	<target name="email-test" depends="getVersion">
		<mail
			mailhost="${mailhost}"
			mailport="${mailport}"
			ssl="yes"
			user="${mailuser}"
			password="${mailpwd}"
			charset="utf-8"
			from="${mailuser}"
			replyto="${mailuser}"
			messagefile="NewVersionMail.txt"
			subject="JFritz: Neue Version ${version} verf체gbar!">
			<to address="${mail-rcp2}" />
		</mail>
	</target>

	<target name="prepare-updatefiles" depends="prepare" description="Prepares files for creating update file">
		<copy todir="${build.resources}/lang/lang">
			<fileset dir="${dist}/lang" />
		</copy>
		<copy todir="${build.resources}/lib/lib">
			<fileset dir="${dist}/lib" />
		</copy>
		<copy todir="${build.resources}/number/number">
			<fileset dir="${dist}/number" />
		</copy>
		<copy todir="${build.resources}/pictures/pictures">
			<fileset dir="${dist}/pictures">
				<include name="**/NoPic.jpg" />
			</fileset>
		</copy>
		<copy todir="${build.resources}/styles/styles">
			<fileset dir="${dist}/styles">
				<include name="**/*.html" />
			</fileset>
		</copy>

		<copy todir="${build.resources}">
			<fileset dir=".">
				<include name="splash.png" />
				<include name="status.png" />
				<include name="MSVCR71.dll" />
			</fileset>
		</copy>

		<zip zipfile="${build.resources}/lang.zip" basedir="${build.resources}/lang" />
		<zip zipfile="${build.resources}/lib.zip" basedir="${build.resources}/lib" />
		<zip zipfile="${build.resources}/number.zip" basedir="${build.resources}/number" />
		<zip zipfile="${build.resources}/pictures.zip" basedir="${build.resources}/pictures" />
		<zip zipfile="${build.resources}/styles.zip" basedir="${build.resources}/styles" />
		<delete dir="${build.resources}/lang" />
		<delete dir="${build.resources}/lib" />
		<delete dir="${build.resources}/number" />
		<delete dir="${build.resources}/pictures" />
		<delete dir="${build.resources}/styles" />

		<copy todir="${build.jars}">
			<fileset dir="${build}">
				<include name="**/*.jar" />
			</fileset>
		</copy>

	</target>

</project>