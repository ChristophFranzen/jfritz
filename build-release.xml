<?xml version="1.0" encoding="UTF-8"?>
<project name="JFritz-Release" default="scp-update-beta" basedir=".">
	<import file="build-release-pwd.xml" />
	<import file="build.xml" />

	<property name="product" value="JFritz" />
	<property name="version" value="unknown" />

	<!-- release properties -->
	<property name="home" value="ant" />
	<property name="dist" value="${home}/dist" />
	<property name="release" value="${home}/release" />
	<property name="update" value="${home}/update" />
	<property name="lib" value="lib" />
	<property name="lib-dev" value="lib-dev" />
	<property name="docs" value="../Doku" />

	<!-- build properties -->
	<property name="build" value="${home}/build" />
	<property name="build.classes" value="${build}/classes" />
	<property name="build.jars" value="${build}/jars" />
	<property name="build.resources" value="${build}/resources" />

	<!-- mac spezifisch -->

	<!-- include all jars in lib to classpath -->
	<path id="build.classpath">
		<fileset dir="${lib}">
			<include name="**/*.jar" />
		</fileset>
	</path>

	<path id="helper.classpath">
		<pathelement location="${build.classes}" />
	</path>

	<path id="test.classpath">
		<path refid="build.classpath" />
		<pathelement location="${build.classes}" />
		<pathelement location="${build.unittests}" />
		<fileset dir="${build}">
			<include name="*.jar" />
		</fileset>
	</path>

	<path id="ant-deb.classpath">
		<fileset dir="${lib-dev}">
			<include name="**/*.jar" />
		</fileset>
	</path>

	<taskdef resource="ant_deb_task.properties" classpathref="ant-deb.classpath"/>

	<target name="prepare" depends="clean, build, getVersion" description="Runs getVersion, clean and build of JFritz!">
	</target>

	<target name="release-deb" depends="prepare" description="Creates a deb-Package for Linux (Debian)">
		<delete dir="${release}/linux" />
		<mkdir dir="${release}" />
		<mkdir dir="${release}/linux" />
		<mkdir dir="${release}/linux/jfritz-${version}" />

		<!-- copy new jfritz-files to linux directory -->
		<copy todir="${release}/linux/jfritz-${version}">
			<fileset dir="${dist}">
			</fileset>
		</copy>
		<!-- copy logo to linux directory -->
		<copy todir="${release}/linux/jfritz-${version}">
			<fileset dir="../../Release/Linux/">
				<include name="jfritz.png" />
			</fileset>
		</copy>

		<!-- do deb-packaging here -->
        <desktopentry
            toFile="${release}/linux/JFritz.desktop"
            name="JFritz"
            comment="An application to communicate with your FRITZ!Box"
            exec="/usr/bin/jfritz"
            icon="/opt/JFritz/jfritz.png"
            categories="Utility;TelephonyTools;Java"
        />

        <deb
            todir="${release}/linux"
            package="jfritz"
            section="utils"
            depends="sun-java5-jre | sun-java6-jre"
        	preinst="../../Release/Linux/preinst"
        >
            <version upstream="${version}"/>
            <maintainer email="Robert Palmer" name="jfritz@robotniko.de"/>
            <description synopsis="An application to communicate with your FRITZ!Box.">
It is possible to get the caller list, manage phonebook contacts, do reverse lookup for unknown phone numbers,
show incoming and outgoing calls in real time and to initiate new calls from the computer.

http://www.jfritz.org/
            </description>
            <tarfileset dir="${release}/linux/jfritz-${version}" prefix="/opt/JFritz">
                <include name="**/**"/>
            	<exclude name="lib/windows/**"/>
            	<exclude name="lib/mac/**"/>
	        	<exclude name="lib/sunos/**"/>
            </tarfileset>

            <tarfileset file="../../Release/Linux/jfritz" prefix="/usr/bin" filemode="755"/>
            <tarfileset dir="../../Release/Linux/" prefix="/usr/share/doc/jfritz">
                <include name="COPYING"/>
                <include name="README-de"/>
                <include name="README-en"/>
            </tarfileset>
            <tarfileset file="${release}/linux/JFritz.desktop" prefix="usr/share/applications"/>
        </deb>

		<delete dir="${release}/linux/jfritz-${version}" />
		<delete>
			<fileset dir="${release}/linux/">
	    		<include name="JFritz.desktop"/>
			</fileset>
		</delete>
	</target>

	<target name="release-linux" depends="prepare, release-deb" description="Creates a tar.gz-Release for Linux!">
		<mkdir dir="${release}/linux/jfritz-${version}" />

		<!-- copy new jfritz-files to linux directory -->
		<copy todir="${release}/linux/jfritz-${version}">
			<fileset dir="${dist}">
			</fileset>
		</copy>

		<tar tarfile="${release}/linux/jfritz-${version}.tar">
			<tarfileset dir="${release}/linux">
				<exclude name="*.deb"/>
			</tarfileset>
		</tar>
		<gzip src="${release}/linux/jfritz-${version}.tar" destfile="${release}/linux/JFritz-${version}.tar.gz" />
		<delete dir="${release}/linux/jfritz-${version}" />
		<delete file="${release}/linux/jfritz-${version}.tar" />
	</target>

	<target name="prepare-mac" depends="prepare" description="Copy new JFritz files to Mac-Template!">
		<delete dir="${release}/mac" />
		<mkdir dir="${release}" />
		<mkdir dir="${release}/mac" />
		<mkdir dir="${release}/mac/tmp" />

		<!-- copy mac-template to release directory -->
		<copy todir="${release}/mac/tmp">
			<fileset dir="../../Release/MAC/Vorlage">
			</fileset>
		</copy>

		<copy file="../../Release/MAC/Vorlage/__MACOSX/JFritz.app/Contents/._Info.plist"
		             tofile="${release}/mac/tmp/__MACOSX/JFritz.app/Contents/._Info.plist" />

		<!-- adapt version string in Info.plist -->
		<copy file="../../Release/MAC/Vorlage/JFritz.app/Contents/Info.plist"
		             tofile="${release}/mac/tmp/JFritz.app/Contents/Info.plist"
					 overwrite="yes">
	        <filterchain>
	           <replacetokens>
					<token key="version" value="${version}"/>
	            </replacetokens>
	        </filterchain>
	    </copy>

		<!-- copy actual changelog -->
		<copy todir="${release}/mac/tmp">
			<fileset dir="${dist}">
				<include name="**/Changelog.txt" />
			</fileset>
		</copy>

		<!-- copy application files -->
		<copy todir="${release}/mac/tmp/JFritz.app/Contents/Resources/Java">
			<fileset dir="${dist}">
			</fileset>
		</copy>

		<echo message="Prepared MAC-Release ${app.name} ${version}! Package it with TransMac and run the release-mac-Task afterwards." />
	</target>

	<target name="release-mac-zip" depends="prepare-mac, getVersion" description="Creates a ZIP-File for MacOS!">
		<zip destfile="${release}/mac/JFritz-${version}-Mac.zip" basedir="${release}/mac/tmp" />
	</target>

	<target name="release-mac-dmg" depends="prepare-mac, getVersion" description="Creates a DMG-File for MacOS!">
		<waitfor maxwait="15" maxwaitunit="minute" checkevery="10000">
			<available file="${release}/mac/JFritz-${version}.dmg"/>
		</waitfor>

		<mkdir dir="${release}/mac/JFritz-${version}" />
		<!-- copy new package to mac directory -->
		<copy todir="${release}/mac/JFritz-${version}">
			<fileset dir="${release}/mac/">
				<include name="**/JFritz-${version}.dmg" />
			</fileset>
		</copy>
		<delete file="${release}/mac/JFritz-${version}.dmg" />
		<delete dir="${release}/mac/tmp" />
	</target>

	<target name="release-win" depends="prepare" description="Creates Setup- and ZIP-File for Windows!">
		<delete dir="${release}/win" />
		<mkdir dir="${release}" />
		<mkdir dir="${release}/win" />
		<mkdir dir="${release}/win/tmp" />

		<!-- copy win template to release directory -->
		<copy todir="${release}/win/tmp">
			<fileset dir="../../Release/WIN">
			</fileset>
		</copy>

		<!-- clear copied directories -->
		<delete dir="${release}/win/tmp/binaries" />
		<delete dir="${release}/win/tmp/Output" />

		<!-- copy new jfritz-files to win directory -->
		<copy todir="${release}/win/tmp/binaries" overwrite="yes">
			<fileset dir="${dist}">
			</fileset>
		</copy>

		<!-- creating beta version -->
		<!-- actualize version of setup file -->
		<taskdef name="UpdateSetupConfig" classname="de.moonflower.jfritz.ant.UpdateSetupConfig" classpathref="helper.classpath" />
		<UpdateSetupConfig file="${release}/win/tmp/jfritz-version.txt" appName="${product}" appType="Beta-Setup" appVersion="${version}" />

		<!-- generate setup-file -->
		<exec executable="C:\Program Files (x86)\Inno Setup 5\ISCC.exe">
			<arg value="${release}/win/tmp/jfritz.iss" />
		</exec>

		<!-- zip setup-file and delete temporary files-->
		<zip destfile="${release}/win/jfritz-${version}-Beta-Win.zip" basedir="${release}/win/tmp/Output" />
		<zip destfile="${release}/win/JFritz-${version}-Beta.zip" basedir="${release}/win/tmp/binaries" />

		<!-- creating release version -->
		<!-- actualize version of setup file -->
		<delete dir="${release}/win/tmp/Output" />
		<taskdef name="UpdateSetupConfig" classname="de.moonflower.jfritz.ant.UpdateSetupConfig" classpathref="helper.classpath" />
		<UpdateSetupConfig file="${release}/win/tmp/jfritz-version.txt" appName="${product}" appType="Setup" appVersion="${version}" />

		<!-- generate setup-file -->
		<exec executable="C:\Program Files (x86)\Inno Setup 5\ISCC.exe">
			<arg value="${release}/win/tmp/jfritz.iss" />
		</exec>

		<!-- zip setup-file and delete temporary files-->
		<zip destfile="${release}/win/jfritz-${version}-Win.zip" basedir="${release}/win/tmp/Output" />
		<zip destfile="${release}/win/JFritz-${version}.zip" basedir="${release}/win/tmp/binaries" />

		<delete dir="${release}/win/tmp" />
	</target>

	<target name="prepare-updatefiles" depends="prepare" description="Prepares files for creating update file">
		<copy todir="${build.resources}/lang/lang">
			<fileset dir="${dist}/lang" />
		</copy>
		<copy todir="${build.resources}/lib/lib">
			<fileset dir="${dist}/lib" />
		</copy>
		<copy todir="${build.resources}/number/number">
			<fileset dir="${dist}/number" />
		</copy>
		<copy todir="${build.resources}/pictures/pictures">
			<fileset dir="${dist}/pictures">
				<include name="**/NoPic.jpg" />
			</fileset>
		</copy>
		<copy todir="${build.resources}/styles/styles">
			<fileset dir="${dist}/styles">
				<include name="**/*.html" />
			</fileset>
		</copy>

		<copy todir="${build.resources}">
			<fileset dir=".">
				<include name="splash.png" />
				<include name="status.png" />
				<include name="MSVCR71.dll" />
			</fileset>
		</copy>

		<zip zipfile="${build.resources}/lang.zip" basedir="${build.resources}/lang" />
		<zip zipfile="${build.resources}/lib.zip" basedir="${build.resources}/lib" />
		<zip zipfile="${build.resources}/number.zip" basedir="${build.resources}/number" />
		<zip zipfile="${build.resources}/pictures.zip" basedir="${build.resources}/pictures" />
		<zip zipfile="${build.resources}/styles.zip" basedir="${build.resources}/styles" />
		<delete dir="${build.resources}/lang" />
		<delete dir="${build.resources}/lib" />
		<delete dir="${build.resources}/number" />
		<delete dir="${build.resources}/pictures" />
		<delete dir="${build.resources}/styles" />

		<copy todir="${build.jars}">
			<fileset dir="${build}">
				<include name="**/*.jar" />
			</fileset>
		</copy>

	</target>

	<target name="create-updatefiles" depends="prepare-updatefiles" description="Creates files for auto update">
		<mkdir dir="${update}" />
		<taskdef name="createUpdateFile" classname="de.moonflower.jfritz.ant.CreateUpdateFile" classpathref="test.classpath" />
		<createUpdateFile toDir="${update}" version="${version}">
			<addDirectory directory="${build.resources}" />
			<addDirectory directory="${build.jars}" />
		</createUpdateFile>

		<mkdir dir="${update}/${version}" />
		<copy todir="${update}/${version}" >
			<fileset dir="${build.jars}">
				<include name="**/*.jar" />
			</fileset>
			<fileset dir="${build.resources}" />
		</copy>
		<delete dir="${build.jars}" />
		<delete dir="${build.resources}" />
	</target>

	<target name="scp-beta" depends="release-linux, release-win, release-mac-zip" description="Copy windows-, linux and mac release files to jfritz.robotniko.de/beta">
		<scp file="${release}/win/JFritz-${version}-Beta-Win.zip" port="${port2}" trust="yes" todir="${user2}@${server2}:./public/" verbose="yes" password="${password2}"/>
		<scp file="${release}/win/JFritz-${version}-Beta.zip" port="${port2}" trust="yes" todir="${user2}@${server2}:./public/" verbose="yes" password="${password2}"/>
		<scp file="${release}/linux/JFritz-${version}.tar.gz" port="${port2}" trust="yes" todir="${user2}@${server2}:./public/" verbose="yes" password="${password2}"/>
		<scp file="${release}/linux/jfritz_${version}-1_all.deb" port="${port2}" trust="yes" todir="${user2}@${server2}:./public/" verbose="yes" password="${password2}"/>
		<scp file="${release}/mac/JFritz-${version}-Mac.zip" port="${port2}" trust="yes" todir="${user2}@${server2}:./public/" verbose="yes" password="${password2}"/>
		<scp file="${dist}/Changelog.txt" port="${port2}" trust="yes" todir="${user2}@${server2}:./public/beta" verbose="yes" password="${password2}"/>
		<sshexec command="mkdir mac; cd mac" username="${user2}" host="${server2}" port="${port2}" trust="yes" password="${password2}" />
		<sshexec command="unzip ../JFritz-${version}-Mac.zip" username="${user2}" host="${server2}" port="${port2}" trust="yes" password="${password2}" />
		<sshexec command="chmod 555 JFritz.app/Contents/MacOS/JavaApplicationStub" username="${user2}" host="${server2}" port="${port2}" trust="yes" password="${password2}" />
		<sshexec command="rm ../JFritz-${version}-Mac.zip" username="${user2}" host="${server2}" port="${port2}" trust="yes" password="${password2}" />
		<sshexec command="zip -r ../JFritz-0.7.3.27-Mac.zip *" username="${user2}" host="${server2}" port="${port2}" trust="yes" password="${password2}" />
		<sshexec command="mv -f ./public/beta/JFritz* ./public/beta/old"  username="${user2}" host="${server2}" port="${port2}" trust="yes" password="${password2}" />
		<sshexec command="mv -f ./public/JFritz-${version}-Beta-Win.zip ./public/beta" username="${user2}" host="${server2}" port="${port2}" trust="yes" password="${password2}" />
		<sshexec command="mv -f ./public/JFritz-${version}-Beta.zip ./public/beta" username="${user2}" host="${server2}" port="${port2}" trust="yes" password="${password2}" />
		<sshexec command="mv -f ./public/JFritz-${version}.tar.gz ./public/beta" username="${user2}" host="${server2}" port="${port2}" trust="yes" password="${password2}" />
		<sshexec command="mv -f ./public/jfritz_${version}-1_all.deb ./public/beta" username="${user2}" host="${server2}" port="${port2}" trust="yes" password="${password2}" />
		<sshexec command="mv -f ./public/JFritz-${version}-Mac.zip ./public/beta" username="${user2}" host="${server2}" port="${port2}" trust="yes" password="${password2}" />
		<sshexec command="unzip -o ./public/beta/JFritz-${version}-Beta-Win.zip -d ./public/beta/" username="${user2}" host="${server2}" port="${port2}" trust="yes" password="${password2}" />
	</target>

	<target name="scp-update-beta" depends="create-updatefiles" description="Uploads update files to jfritz.robotniko.de/update">
		<zip destfile="${update}/jfritz-${version}-update.zip" basedir="${update}/${version}" />
		<scp file="${update}/jfritz-${version}-update.zip" port="${port1}" trust="yes" todir="${user1}@${server1}:./public/update/" verbose="yes" password="${password1}" />
		<sshexec command="unzip ./public/update/jfritz-${version}-update.zip -d ./public/update/${version}" username="${user1}" host="${server1}" port="${port1}" trust="yes" password="${password1}" />
		<sshexec command="rm ./public/update/jfritz-${version}-update.zip"  username="${user1}" host="${server1}" port="${port1}" trust="yes" password="${password1}" />
		<scp file="${update}/update.txt" port="${port1}" trust="yes" todir="${user1}@${server1}:./public/update/" verbose="yes" password="${password1}" />
		<scp file="${update}/current.txt" port="${port1}" trust="yes" todir="${user1}@${server1}:./public/update/" verbose="yes" password="${password1}" />
	</target>

	<target name="scp-update" depends="create-updatefiles" description="Uploads files per scp to update.jfritz.org">
		<zip destfile="${update}/jfritz-${version}-update.zip" basedir="${update}/${version}" />
		<scp file="${update}/jfritz-${version}-update.zip" port="${port3}" trust="yes" todir="${user3}@${server3}:./public/update/" verbose="yes" password="${password3}" />
		<sshexec command="unzip ./public/update/jfritz-${version}-update.zip -d ./public/update/${version}" username="${user3}" host="${server3}" port="${port3}" trust="yes" password="${password3}" />
		<sshexec command="rm ./public/update/jfritz-${version}-update.zip"  username="${user3}" host="${server3}" port="${port3}" trust="yes" password="${password3}" />
		<scp file="${update}/update.txt" port="${port3}" trust="yes" todir="${user3}@${server3}:./public/update/" verbose="yes" password="${password3}" />
		<scp file="${update}/current.txt" port="${port3}" trust="yes" todir="${user3}@${server3}:./public/update/" verbose="yes" password="${password3}" />
	</target>

	<target name="ftp-beta" depends="release-linux, release-win" description="Copy all files to beta directory at Rainer's FTP-Server">
		  <ftp server="${server4}"
		       userid="${user4}"
		       password="${password4}">
		    <fileset dir="${release}/win/">
			      <include name="JFritz-${version}-Beta-Win.zip"/>
			      <include name="JFritz-${version}-Beta.zip"/>
		    </fileset>
		    <fileset dir="${dist}/">
			      <include name="Changelog.txt"/>
		    </fileset>
		  </ftp>
	</target>

	<target name="release-all" depends="prepare, release-mac-zip, release-linux, release-win, create-updatefiles">
	</target>

	<target name="jabber-msg" depends="getVersion">
		  <taskdef name="jabber" classname="com.tfftech.ant.taskdefs.im.jabber.JabberTask" />
		  <jabber host="robotniko.de" port="25222" from="${jabber-user}" password="${jabber-pwd}"
		  	tolist="${jabber-rcp1},${jabber-rcp2}">
		  	<message>Neue Version ${version} ist online: http://jfritz.robotniko.de/beta/</message>
		  </jabber>
	</target>

	<target name="email-test" depends="getVersion">
		<mail
			mailhost="${mailhost}"
			mailport="${mailport}"
			ssl="yes"
			user="${mailuser}"
			password="${mailpwd}"
			charset="utf-8"
			from="${mailuser}"
			replyto="${mailuser}"
			messagefile="NewVersionMail.txt"
			subject="JFritz: Neue Version ${version} verfügbar!">
			<to address="${mail-rcp2}" />
		</mail>
	</target>

	<target name="email-msg" depends="getVersion">
		<mail
			mailhost="${mailhost}"
			mailport="${mailport}"
			ssl="yes"
			user="${mailuser}"
			password="${mailpwd}"
			charset="utf-8"
			from="${mailuser}"
			replyto="${mailuser}"
			messagefile="NewVersionMail.txt"
			subject="JFritz: Neue Version ${version} verfügbar!"
			bcclist="${mail-rcp_skyteddy}, ${mail-rcp_mr_command}, ${mail-rcp_BurningCrash},
					 ${mail-rcp_F1Schumi}, ${mail-rcp_Kolass}, ${mail-rcp_laubenpieper},
					 ${mail-rcp_Jonnyswiss}, ${mail-rcp_DrVerdi}, ${mail-rcp_Muenchner},
			         ${mail-rcp_Fred}, ${mail-rcp_ernest015}, ${mail-rcp_Hermann},
					 ${mail-rcp_doc456}, ${mail-rcp_Deudekom}, ${mail-rcp_Wäldler}">
			<to address="${mail-rcp1}" />
		</mail>
		<mail
			mailhost="${mailhost}"
			mailport="${mailport}"
			ssl="yes"
			user="${mailuser}"
			password="${mailpwd}"
			charset="utf-8"
			from="${mailuser}"
			replyto="${mailuser}"
			messagefile="NewVersionMail.txt"
			subject="JFritz: Neue Version ${version} verfügbar!"
			bcclist="${mail-rcp_magiclb}, ${mail-rcp_DocAdams}, ${mail-rcp_Droemel},
				 ${mail-rcp_Feuer_Fritz}, ${mail-rcp_musenbaron}, ${mail-rcp_Stefan},
				 ${mail-rcp_mega}, ${mail-rcp_Freenetler}, ${mail-rcp_Weigandt},
				 ${mail-rcp_Wohnmobil}, ${mail-rcp_weadolf}, ${mail-rcp_Wolfgang},
				 ${mail-rcp_Mac_}, ${mail-rcp_Schlumpfine}, ${mail-rcp_Junge}">
			<to address="${mail-rcp1}" />
		</mail>
		<mail
			mailhost="${mailhost}"
			mailport="${mailport}"
			ssl="yes"
			user="${mailuser}"
			password="${mailpwd}"
			charset="utf-8"
			from="${mailuser}"
			replyto="${mailuser}"
			messagefile="NewVersionMail.txt"
			subject="JFritz: Neue Version ${version} verfügbar!"
			bcclist="${mail-rcp_Hasa}, ${mail-rcp_Stephan}, ${mail-rcp_roman200},
				 ${mail-rcp_digi1}, ${mail-rcp_yelsip}, ${mail-rcp_ekrieger},
				 ${mail-rcp_franco}, ${mail-rcp_richard}, ${mail-rcp_valery}">
			<to address="${mail-rcp1}" />
		</mail>
	</target>

</project>